name: Refresh docker NuGet cache

on:
  push:
    branches:
      - "hpcc-platform-8.12.x"

  workflow_dispatch:
    inputs:
      image:
        description: "Image"
        required: true
        default: "all"
        type: choice
        options:
          - "all"

jobs:
  build-images:
    strategy:
      matrix:
        image: ["ubuntu-22.04"]
      fail-fast: false

    name: "Docker:  ${{ matrix.image }}"
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: DockerHub login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Set vars
        id: vars
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: "Build dockerfile"
        shell: "bash"
        run: |
          docker build --progress plain --pull --rm -f "dockerfiles/${{ matrix.image }}.dockerfile" \
              -t ${{ secrets.DOCKER_USERNAME }}/vcpkg-${{ matrix.image }}:${{ steps.vars.outputs.sha_short }} \
              -t ${{ secrets.DOCKER_USERNAME }}/vcpkg-${{ matrix.image }}:latest \
              --build-arg GITHUB_ACTOR=${{ github.actor }} \
              --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
              "."

      - name: "Push docker image"
        shell: "bash"
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/vcpkg-${{ matrix.image }}:${{ steps.vars.outputs.sha_short }}
          docker push ${{ secrets.DOCKER_USERNAME }}/vcpkg-${{ matrix.image }}:latest

  build:
    strategy:
      matrix:
        label:
          [
            "ubuntu-18.04-x64",
            "ubuntu-20.04-x64",
            "ubuntu-22.04-x64",
            "windows-2019-x64",
            "windows-2019-x86",
            "windows-2022-x64",
            "windows-2022-x86",
            "macos-11-x64",
            "macos-12-x64",
          ]
        include:
          - label: "ubuntu-18.04-x64"
            os: "ubuntu-18.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            logs: "/usr/local/share/vcpkg"
          - label: "ubuntu-20.04-x64"
            os: "ubuntu-20.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            logs: "/usr/local/share/vcpkg"
          - label: "ubuntu-22.04-x64"
            os: "ubuntu-22.04"
            triplet: "x64-linux"
            mono: "mono"
            sudo: "sudo"
            logs: "/usr/local/share/vcpkg"
          - label: "windows-2019-x64"
            os: "windows-2019"
            triplet: "x64-windows"
            mono: ""
            sudo: ""
            logs: "C:/vcpkg"
          - label: "windows-2019-x86"
            os: "windows-2019"
            triplet: "x86-windows"
            mono: ""
            sudo: ""
            logs: "C:/vcpkg"
          - label: "windows-2022-x64"
            os: "windows-2022"
            triplet: "x64-windows"
            mono: ""
            sudo: ""
            logs: "C:/vcpkg"
          - label: "windows-2022-x86"
            os: "windows-2022"
            triplet: "x86-windows"
            mono: ""
            sudo: ""
            logs: "C:/vcpkg"
          - label: "macos-11-x64"
            os: "macos-11"
            triplet: "x64-osx"
            mono: "mono"
            sudo: "sudo"
            logs: "/usr/local/share/vcpkg"
          - label: "macos-12-x64"
            os: "macos-12"
            triplet: "x64-osx"
            mono: "mono"
            sudo: "sudo"
            logs: "/usr/local/share/vcpkg"
      fail-fast: false

    name: "${{ matrix.label }}"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ubuntu Dependencies
        if: ${{ contains(matrix.os, 'ubuntu') }}
        shell: "bash"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y -q --no-install-recommends \
            apt-transport-https \
            autoconf \
            autoconf-archive \
            automake \
            autotools-dev \
            binutils-dev \
            bison \
            build-essential \
            ca-certificates \
            curl \
            dirmngr \
            flex \
            git \
            gnupg \
            groff-base \
            libtool \
            pkg-config \
            software-properties-common \
            tar \
            unzip \
            uuid-dev \
            zip

      - name: OSX Dependencies
        if: ${{ matrix.os == 'macos-11' || matrix.os == 'macos-12'}}
        shell: "bash"
        run: |
          brew install pkg-config automake libtool

      - name: "Setup NuGet Sources"
        shell: "bash"
        run: |
          ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1` \
            sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: "Setup NuGet API key"
        shell: "bash"
        run: |
          ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: "Remove builtin vcpkg (old)"
        shell: "bash"
        run: |
          ${{ matrix.sudo }} rm -rf "$VCPKG_INSTALLATION_ROOT"

      - name: Check out source code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Bootstrap vcpkg"
        shell: "bash"
        run: |
          ./bootstrap-vcpkg.sh

      - name: "Update nuget (overlays)"
        shell: "bash"
        run: |
          ./vcpkg install --vcpkg-root=. --overlay-ports=overlays --triplet=${{ matrix.triplet }}

      - name: "Upload failed logs"
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.label }}-logs
          path: ${{ matrix.logs }}/buildtrees/*/*.log
