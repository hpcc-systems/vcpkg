diff --git a/sdk/src/common/random.cc b/sdk/src/common/random.cc
index 77b88cfa..14e94d0c 100644
--- a/sdk/src/common/random.cc
+++ b/sdk/src/common/random.cc
@@ -13,11 +13,10 @@ namespace sdk
 {
 namespace common
 {
-// Wraps a thread_local random number generator, but adds a fork handler so that
-// the generator will be correctly seeded after forking.
-//
-// See https://stackoverflow.com/q/51882689/4447365 and
-//     https://github.com/opentracing-contrib/nginx-opentracing/issues/52
+// Wraps a thread_local random number generator.
+// The previous fork handler is removed because it was not safe and was solving a problem that did
+// not need to be solved since there should be no logic in the child() before it calls exec().
+
 namespace
 {
 class TlsRandomNumberGenerator
@@ -26,17 +25,14 @@ class TlsRandomNumberGenerator
   TlsRandomNumberGenerator() noexcept
   {
     Seed();
-    platform::AtFork(nullptr, nullptr, OnFork);
   }
 
-  static FastRandomNumberGenerator &engine() noexcept { return engine_; }
+  FastRandomNumberGenerator & engine() noexcept { return engine_; }
 
 private:
-  static thread_local FastRandomNumberGenerator engine_;
-
-  static void OnFork() noexcept { Seed(); }
+  FastRandomNumberGenerator engine_;
 
-  static void Seed() noexcept
+  void Seed() noexcept
   {
     std::random_device random_device;
     std::seed_seq seed_seq{random_device(), random_device(), random_device(), random_device()};
@@ -44,13 +40,12 @@ class TlsRandomNumberGenerator
   }
 };
 
-thread_local FastRandomNumberGenerator TlsRandomNumberGenerator::engine_{};
 }  // namespace
 
 FastRandomNumberGenerator &Random::GetRandomNumberGenerator() noexcept
 {
   static thread_local TlsRandomNumberGenerator random_number_generator{};
-  return TlsRandomNumberGenerator::engine();
+  return random_number_generator.engine();
 }
 
 uint64_t Random::GenerateRandom64() noexcept
